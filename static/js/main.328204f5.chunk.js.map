{"version":3,"sources":["navigation.js","memeImageToSelect.js","items.js","DraggableLable.js","imageTarget.js","memCreator.js","content.js","app.js","index.js"],"names":["Nav","className","href","MemeImageToSelect","props","isChosen","onClick","Click","data-tip","data-for","name","id","place","type","effect","src","url","alt","height","Math","min","hight","width","wid","ItemTypes","StyledDiv","styled","div","DraggableLable","useState","value","buttonVissible","textBackGround","cursorIsMove","canMove","isMobile","divState","setValue","useDrag","item","top","left","collect","monitor","isDragging","drag","ref","style","backgroundColor","onMouseLeave","Button","variant","size","position","display","cursor","onMouseEnter","onMouseDown","onMouseUp","onTouchStart","right","handleDelete","as","onChange","event","target","styleForText","border","fontWeight","color","textShadow","onBlur","Wrapper","section","ImageTarget","MoveToPosition","useContext","LabelContex","useDrop","accept","drop","delta","getDifferenceFromInitialOffset","round","x","y","children","createContext","MemeCreator","imgRef","useRef","fontSize","textAlign","data","dataAndStyle","setDataAndStyle","moved","filter","current","focus","concat","Provider","ButtonToolbar","justifyContent","length","MaxId","sort","DropdownButton","ButtonGroup","title","map","index","Dropdown","Item","key","eventKey","align","active","toUpperCase","move","Content","memes","chosen","allMemes","numberOfMemesInPage","memesState","setMemes","axios","get","then","res","slice","memesMapped","numberOfPages","ceil","pagingButtons","Array","fill","_","i","pageNum","start","end","changeToPage","flexWrap","App","backendForDND","TouchBackend","Backend","ReactDOM","render","DndProvider","backend","document","getElementById"],"mappings":"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","file":"static/js/main.328204f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navigation.css'\r\n\r\nfunction Nav() {\r\n\r\n    return (\r\n        <div className=\"header box\">\r\n            <ul className='nav'>\r\n                <li className='nav'>\r\n                    <a className=\"active nav\" href=\"#home\">\r\n                        Home\r\n                    </a>\r\n                </li>\r\n                <li className='nav'>\r\n                    <a className='nav' href=\"#contact\">\r\n                        Contact\r\n                    </a>\r\n                </li>\r\n                <li className=\"pushedRight nav\">\r\n                    <a className='nav' href=\"#about\">\r\n                        About\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        )}\r\n\r\n        export default Nav;","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport './memeImageToSelect.css';\r\n\r\nfunction MemeImageToSelect(props) {\r\n\r\n    return (\r\n        <li\r\n            className={props.isChosen\r\n            ? \"active\"\r\n            : \"\"}\r\n            onClick=\r\n            { () => props.Click() }>\r\n            <div data-tip=\"tooltip\" data-for={props.name}>\r\n                {props.name}\r\n            </div>\r\n            <ReactTooltip id={props.name} place=\"right\" type=\"dark\" effect=\"float\">\r\n                <img\r\n                    className=\"toolTipImage\"\r\n                    src={props.url}\r\n                    alt={props.name}\r\n                    height={Math.min(props.hight, 150)}\r\n                    width={Math.min(props.wid, 150)}/>\r\n            </ReactTooltip>\r\n\r\n        </li>\r\n    )\r\n\r\n}\r\nexport default MemeImageToSelect","export const ItemTypes = {\r\n    LABEL: 'label'\r\n}","import React, {useState} from 'react';\r\nimport {useDrag} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport {isMobile} from \"react-device-detect\";\r\n\r\nconst StyledDiv = styled.div `\r\n                        background-color : none;\r\n                        font-size: 40px;\r\n                        font-weight: bold;\r\n                        position:absolute;\r\n                        \r\n    `;\r\n\r\nfunction DraggableLable(props) {\r\n\r\n    const [divState,\r\n        setValue] = useState({\r\n        value: \"Type your caption here, and move it around\",\r\n        buttonVissible: false,\r\n        textBackGround: false,\r\n        cursorIsMove: false,\r\n        canMove: isMobile,\r\n    });\r\n\r\n    const handleChange = event => setValue({\r\n        ...divState,\r\n        value: event.target.value\r\n    })\r\n    const handleClick = () => setValue({\r\n        ...divState,\r\n        buttonVissible: true,\r\n        textBackGround: true\r\n    });\r\n    const handleLeave = () => setValue({\r\n        ...divState,\r\n        buttonVissible: false,\r\n        textBackGround: false\r\n    });\r\n    \r\n    const [\r\n        {\r\n            isDragging\r\n        },\r\n        drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.LABEL,\r\n            id: props.id,\r\n            top: props.top,\r\n            left: props.left,\r\n            canMove: divState.canMove,\r\n            \r\n        },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    \r\n\r\n    if (isDragging) \r\n        return (<div ref={drag}/>);\r\n    \r\n    return (\r\n        <StyledDiv\r\n            ref={drag}\r\n            style={{\r\n            left: props.left,\r\n            top: props.top,\r\n            backgroundColor: \"none\"\r\n        }}\r\n            onClick={handleClick}\r\n            onMouseLeave={handleLeave}>\r\n            <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                display: (divState.buttonVissible&&!isMobile\r\n                    ? \"block\"\r\n                    : \"none\"),\r\n                cursor: (divState.cursorIsMove\r\n                    ? \"move\"\r\n                    : \"auto\")\r\n            }}\r\n                onMouseEnter=\r\n                { () => setValue({ ...divState, cursorIsMove: true, canMove: false }) }\r\n                onMouseLeave=\r\n                { () => setValue({ ...divState, cursorIsMove: false, canMove: false }) }\r\n                onMouseDown=\r\n                { () => setValue({ ...divState, canMove: true }) }\r\n                onMouseUp=\r\n                { () => setValue({ ...divState, canMove: false })}\r\n                onTouchStart={ () => setValue({ ...divState, canMove: true,buttonVissible: false,textBackGround: false }) }\r\n                \r\n                >\r\n                <img src=\"./move-button.png\" alt=\"\" height=\"30px\" width=\"25px\"/>\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"danger\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                right: \"0\",\r\n                display: (divState.buttonVissible\r\n                    ? \"block\"\r\n                    : \"none\")\r\n            }}\r\n                onClick=\r\n                { () => props.handleDelete() }>\r\n                X\r\n            </Button>\r\n            <TextareaAutosize \r\n                \r\n                as=\"textarea\"\r\n                value={divState.value}\r\n                onChange={handleChange}\r\n                style={{\r\n                ...props.styleForText,\r\n                backgroundColor: (divState.textBackGround\r\n                    ? \"white\"\r\n                    : \"transparent\"),\r\n                border: (divState.textBackGround\r\n                    ? \"black\"\r\n                    : \"none\"),\r\n                fontWeight: \"900\",\r\n                color: \"white\",\r\n                textShadow: \"-1px 1px 2px #000,1px 1px 2px #000,1px -1px 0 #000,-1px -1px 0 #000\"\r\n                }}\r\n                onBlur={()=>setValue({...divState,\r\n                    buttonVissible: false,\r\n                    textBackGround: false})}\r\n             />\r\n        </StyledDiv>\r\n        \r\n    )\r\n}\r\n\r\nexport default DraggableLable;","import React, {useContext} from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDrop} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport {LabelContex} from './memCreator';\r\n\r\nconst Wrapper = styled.section `\r\n  padding: 4em;\r\n  position:relative;\r\n  height: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nfunction ImageTarget(props) {\r\n\r\n    const {MoveToPosition} = useContext(LabelContex);\r\n\r\n    const [,drop] = useDrop({\r\n        accept: ItemTypes.LABEL,\r\n        drop: (item, monitor) => {\r\n            if (item.canMove) {\r\n                \r\n                const delta = monitor.getDifferenceFromInitialOffset();\r\n                const left = Math.round(item.left + delta.x);\r\n                const top = Math.round(item.top + delta.y);\r\n                MoveToPosition(item.id, top, left);\r\n            }\r\n        }\r\n    })\r\n\r\n    \r\n\r\n    return (\r\n        <Wrapper ref={drop}>\r\n            {props.children}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ImageTarget;","import React, {createContext, useState,useRef} from 'react';\r\n\r\nimport './memeCreator.css'\r\nimport DraggableLable from './DraggableLable';\r\nimport ImageTarget from './imageTarget';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nexport const LabelContex = createContext({MoveToPosition: null})\r\n\r\n\r\nexport default function MemeCreator(props) {\r\n    \r\n    const imgRef = useRef(null);\r\n\r\n    const [dataAndStyle,\r\n        setDataAndStyle] = useState({\r\n        style: {\r\n            fontSize: \"small\",\r\n            textAlign: \"center\"\r\n        },\r\n        data: [\r\n            {\r\n                id: 1,\r\n                top: 20,\r\n                left: 20\r\n            }\r\n        ]\r\n    });\r\n\r\n    const deleteCaption = id => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        data: dataAndStyle\r\n            .data\r\n            .filter(x => x.id !== id)\r\n    });\r\n\r\n    const addCaption = () => {\r\n        if (dataAndStyle.data.length === 0) {\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: [\r\n                    {\r\n                        id: 1,\r\n                        top: 20,\r\n                        left: 20\r\n                    }\r\n                ]\r\n            });\r\n        } else {\r\n            const MaxId = dataAndStyle\r\n                .data\r\n                .sort((x, y) => x.id<y.id\r\n                    ? -1\r\n                    : 1)[dataAndStyle.data.length - 1]\r\n                .id;\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: dataAndStyle\r\n                    .data\r\n                    .concat({\r\n                        id: MaxId + 1,\r\n                        top: 0,\r\n                        left: 0\r\n                    })\r\n            });\r\n        }\r\n    };\r\n\r\n    const changeAlign = align => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            textAlign: align\r\n        }\r\n    });\r\n    const changeSize = size => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            fontSize: size\r\n        }\r\n    });\r\n\r\n    const MoveToPosition = (id, top, left) => {\r\n        const moved = dataAndStyle\r\n            .data\r\n            .filter(x => x.id === id);\r\n        moved[0].top = top;\r\n        moved[0].left = left;\r\n        imgRef.current.focus();\r\n        setDataAndStyle({\r\n            ...dataAndStyle,\r\n            data: dataAndStyle\r\n                .data\r\n                .filter(x => x.id !== id)\r\n                .concat(moved[0])\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    const textAligns = [\"left\", \"right\", \"center\"];\r\n    const textSizes = [\"x-small\", \"small\", \"medium\", \"large\", \"xx-large\"];\r\n\r\n    return (\r\n        <LabelContex.Provider value={{MoveToPosition}}>\r\n            <div>\r\n                <ButtonToolbar\r\n                    style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\"}}>\r\n\r\n                    <Button ref={imgRef} variant=\"success\" onClick={addCaption} size=\"sm\">\r\n                        Add Caption\r\n                    </Button>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Align\"\r\n                        id=\"text-align-dropdown\"\r\n                        size=\"sm\">\r\n                        {textAligns.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        onClick = {\r\n                            () => changeAlign(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.textAlign\r\n                        }> {x}\r\n                        </Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Size\"\r\n                        id=\"text-size-dropdown\"\r\n                        size=\"sm\">\r\n                        {textSizes.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        style = {\r\n                            {\r\n                                fontSize: x\r\n                            }\r\n                        }\r\n                        onClick = {\r\n                            () => changeSize(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.fontSize\r\n                        } > {\r\n                            x.toUpperCase()\r\n                        }</Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                   </ButtonToolbar>\r\n                        <ImageTarget >\r\n                          \r\n                             <img\r\n                                src={props.url}\r\n                                alt=\"meme\"\r\n                                className=\"memeImage\"\r\n                                \r\n                              /> \r\n                               {dataAndStyle\r\n                                .data\r\n                                .map(item => <DraggableLable\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    top={item.top}\r\n                                    left={item.left}\r\n                                    handleDelete=\r\n                                    { () => deleteCaption(item.id) }\r\n                                    move={(id,top,left)=>MoveToPosition(id,top,left)}\r\n                                    \r\n                                    styleForText={dataAndStyle.style}/>)\r\n}\r\n                        </ImageTarget>\r\n                       </div>\r\n                        </LabelContex.Provider>)}","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport MemeImageToSelect from './memeImageToSelect';\r\nimport MemeCreator from './memCreator';\r\nimport './content.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction Content() {\r\n    const [memesState,\r\n        setMemes] = useState({\r\n        memes: [\r\n            {\r\n                url: \"\",\r\n                height:1,\r\n                width:1\r\n            }\r\n        ],\r\n        chosen: 0,\r\n        allMemes: [],\r\n        numberOfMemesInPage: 10\r\n    });\r\n\r\n    if (memesState.memes[0].url === \"\") {\r\n        axios\r\n            .get(`https://api.imgflip.com/get_memes`)\r\n            .then(res => {\r\n                const memes = res.data.data.memes;\r\n                setMemes({\r\n                    ...memesState,\r\n                    memes: memes.slice(0, memesState.numberOfMemesInPage),\r\n                    allMemes: memes\r\n                });\r\n            })\r\n    }\r\n\r\n    const changePicture = id => setMemes({\r\n        ...memesState,\r\n        chosen: id\r\n    });\r\n    const changeToPage = pageNum => {\r\n        const start = pageNum * memesState.numberOfMemesInPage;\r\n        let end = (pageNum + 1) * memesState.numberOfMemesInPage;\r\n        end = end <memesState.allMemes.length\r\n            ? end\r\n            : memesState.allMemes.length;\r\n        setMemes({\r\n            ...memesState,\r\n            memes: memesState\r\n                .allMemes\r\n                .slice(start, end),\r\n            chosen: 0\r\n        })\r\n    }\r\n\r\n    let memesMapped = memesState\r\n        .memes\r\n        .map((x, index) => <MemeImageToSelect\r\n            key={x.id + memesState.numberOfMemesInPage}\r\n            url={x.url}\r\n            name={x.name}\r\n            isChosen={index === memesState.chosen}\r\n            hight={x.height}\r\n            wid={x.width}\r\n            Click={() => changePicture(index)}/>);\r\n\r\n    const numberOfPages = Math.ceil(memesState.allMemes.length / memesState.numberOfMemesInPage);\r\n\r\n    const pagingButtons = Array(numberOfPages)\r\n        .fill()\r\n        .map((_, i) => <Button key={i} variant=\"success\" onClick={() => changeToPage(i)}>\r\n            {i + 1}\r\n        </Button>);\r\n\r\n    const memesPerPageOptions = [5, 10, 20];\r\n\r\n    return (\r\n        <div className='content box'>\r\n            <div className=\"middle box\">\r\n                <MemeCreator\r\n                    key={memesState.chosen}\r\n                    url={memesState.memes[memesState.chosen].url}/>\r\n                </div>\r\n\r\n                    <div className=\"side box\">\r\n                        <ButtonGroup\r\n                            size=\"sm\"\r\n                            style={{\r\n                            display: \"flex\",\r\n                            flexWrap: \"wrap\"\r\n                        }}>\r\n                            {pagingButtons}\r\n                            </ButtonGroup>\r\n\r\n                                <DropdownButton\r\n                                    as={ButtonGroup}\r\n                                    variant=\"success\"\r\n                                    title=\"Memes per page\"\r\n                                    id=\"num-of-memes-dropdown\"\r\n                                    size=\"sm\">\r\n                                    {memesPerPageOptions.map((x, index) => \r\n                                        <Dropdown.Item variant = \"success\" key = {index}\r\n                                    eventKey = {index}\r\n                                    onClick = {() => setMemes({\r\n                                            ...memesState,\r\n                                            numberOfMemesInPage: x,\r\n                                            chosen: 0,\r\n                                            memes: memesState\r\n                                                .allMemes\r\n                                                .slice(0, x)\r\n                                        })\r\n                                    }\r\n                                    active = {x === memesState.numberOfMemesInPage}>\r\n                                {x} \r\n                                        </Dropdown.Item>)}\r\n                                </DropdownButton>\r\n                                        <br/>\r\n                                        <br/>\r\n                                        <ul>\r\n                                            {memesMapped}\r\n                                        </ul>\r\n            </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n\r\n    export default Content;","import React from \"react\";\r\nimport Nav from \"./navigation\";\r\nimport Content from \"./content\";\r\nimport \"./app.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"layoutWrapper\" >\r\n            <Nav />\r\n            <Content />\r\n            <div className=\"footer box\" >\r\n                <p> I am footer </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nimport {DndProvider} from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport TouchBackend from 'react-dnd-touch-backend';\nimport {isMobile} from \"react-device-detect\";\n\n// ========================================\n\n\n\n// Assigning backend based on touch support on the device\nconst backendForDND = isMobile ? TouchBackend : Backend;\n\n\n\n\nReactDOM.render(\n    <DndProvider backend={backendForDND}>\n    <App/>\n</DndProvider>, document.getElementById('root'));"],"sourceRoot":""}