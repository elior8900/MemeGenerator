{"version":3,"sources":["navigation.js","memeImageToSelect.js","items.js","DraggableLable.js","imageTarget.js","memCreator.js","content.js","app.js","index.js"],"names":["Nav","className","href","MemeImageToSelect","props","isChosen","onClick","Click","data-tip","data-for","name","id","place","type","effect","src","url","alt","height","Math","min","hight","width","wid","ItemTypes","StyledDiv","styled","div","DraggableLable","textAreaRef","React","useRef","useState","value","buttonVissible","textBackGround","cursorIsMove","textBoxHight","textBoxWidth","canMove","rotation","divState","setValue","useDrag","item","top","left","collect","monitor","isDragging","drag","ref","style","backgroundColor","onMouseLeave","Button","variant","size","position","display","cursor","onMouseEnter","onMouseDown","onMouseUp","right","handleDelete","Form","Control","as","onChange","event","target","current","getBoundingClientRect","textBoxwidth","String","styleForText","border","fontWeight","color","textShadow","resize","Wrapper","section","ImageTarget","MoveToPosition","useContext","LabelContex","useDrop","accept","drop","delta","getDifferenceFromInitialOffset","round","x","y","children","createContext","MemeCreator","fontSize","textAlign","data","dataAndStyle","setDataAndStyle","Provider","moved","filter","concat","ButtonToolbar","justifyContent","length","MaxId","sort","DropdownButton","ButtonGroup","title","map","index","Dropdown","Item","key","eventKey","align","active","toUpperCase","maxHeight","maxWidth","marginLeft","marginRight","Content","memes","chosen","allMemes","numberOfMemesInPage","memesState","setMemes","console","log","axios","get","then","res","slice","memesMapped","numberOfPages","ceil","pagingButtons","Array","fill","_","i","pageNum","start","end","changeToPage","flexWrap","App","ReactDOM","render","DndProvider","backend","isMobile","TouchBackend","Backend","options","enableTouchEvents","document","getElementById"],"mappings":"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","file":"static/js/main.dba9ad44.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navigation.css'\r\n\r\nfunction Nav() {\r\n\r\n    return (\r\n        <div className=\"header box\">\r\n            <ul className='nav'>\r\n                <li className='nav'>\r\n                    <a className=\"active nav\" href=\"#home\">\r\n                        Home\r\n                    </a>\r\n                </li>\r\n                <li className='nav'>\r\n                    <a className='nav' href=\"#contact\">\r\n                        Contact\r\n                    </a>\r\n                </li>\r\n                <li className=\"pushedRight nav\">\r\n                    <a className='nav' href=\"#about\">\r\n                        About\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        )}\r\n\r\n        export default Nav;","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport './memeImageToSelect.css';\r\n\r\nfunction MemeImageToSelect(props) {\r\n\r\n    return (\r\n        <li\r\n            className={props.isChosen\r\n            ? \"active\"\r\n            : \"\"}\r\n            onClick=\r\n            { () => props.Click() }>\r\n            <div data-tip=\"tooltip\" data-for={props.name}>\r\n                {props.name}\r\n            </div>\r\n            <ReactTooltip id={props.name} place=\"right\" type=\"dark\" effect=\"float\">\r\n                <img\r\n                    className=\"toolTipImage\"\r\n                    src={props.url}\r\n                    alt={props.name}\r\n                    height={Math.min(props.hight, 150)}\r\n                    width={Math.min(props.wid, 150)}/>\r\n            </ReactTooltip>\r\n\r\n        </li>\r\n    )\r\n\r\n}\r\nexport default MemeImageToSelect","export const ItemTypes = {\r\n    LABEL: 'label'\r\n}","import React, {useState} from 'react';\r\nimport {useDrag} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport styled from 'styled-components';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst StyledDiv = styled.div `\r\n                        background-color : none;\r\n                        font-size: 40px;\r\n                        font-weight: bold;\r\n                        position:absolute;\r\n                        \r\n    `;\r\n\r\nfunction DraggableLable(props) {\r\n\r\n    const textAreaRef = React.useRef(null);\r\n\r\n    const [divState,\r\n        setValue] = useState({\r\n        value: \"Type your caption here, and move it around\",\r\n        buttonVissible: false,\r\n        textBackGround: false,\r\n        cursorIsMove: false,\r\n        textBoxHight: \"70px\",\r\n        textBoxWidth: \"250px\",\r\n        canMove: false,\r\n        rotation: 0\r\n    });\r\n\r\n    const handleChange = event => setValue({\r\n        ...divState,\r\n        value: event.target.value\r\n    })\r\n    const handleClick = () => setValue({\r\n        ...divState,\r\n        buttonVissible: true,\r\n        textBackGround: true\r\n    });\r\n    const handleLeave = () => setValue({\r\n        ...divState,\r\n        buttonVissible: false,\r\n        textBackGround: false\r\n    });\r\n    const handleMouseUp = () => {\r\n        if (textAreaRef.current.getBoundingClientRect().hight !== divState.textBoxHight || textAreaRef.current.getBoundingClientRect().width !== divState.textBoxwidth) {\r\n            const hight = String(textAreaRef.current.getBoundingClientRect().height) + \"px\";\r\n            const width = String(textAreaRef.current.getBoundingClientRect().width) + \"px\";\r\n            setValue({\r\n                ...divState,\r\n                textBoxHight: hight,\r\n                textBoxWidth: width\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const [\r\n        {\r\n            isDragging\r\n        },\r\n        drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.LABEL,\r\n            id: props.id,\r\n            top: props.top,\r\n            left: props.left,\r\n            canMove: divState.canMove\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    if (isDragging) \r\n        return (<div ref={drag}/>);\r\n    \r\n    return (\r\n        <StyledDiv\r\n            ref={drag}\r\n            style={{\r\n            left: props.left,\r\n            top: props.top,\r\n            backgroundColor: \"none\"\r\n        }}\r\n            onClick={handleClick}\r\n            onMouseLeave={handleLeave}>\r\n            <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                display: (divState.buttonVissible\r\n                    ? \"block\"\r\n                    : \"none\"),\r\n                cursor: (divState.cursorIsMove\r\n                    ? \"move\"\r\n                    : \"auto\")\r\n            }}\r\n                onMouseEnter=\r\n                { () => setValue({ ...divState, cursorIsMove: true, canMove: false }) }\r\n                onMouseLeave=\r\n                { () => setValue({ ...divState, cursorIsMove: false, canMove: false }) }\r\n                onMouseDown=\r\n                { () => setValue({ ...divState, canMove: true }) }\r\n                onMouseUp=\r\n                { () => setValue({ ...divState, canMove: false })}>\r\n                <img src=\"./move-button.png\" alt=\"\" height=\"30px\" width=\"25px\"/>\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"danger\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                right: \"0\",\r\n                display: (divState.buttonVissible\r\n                    ? \"block\"\r\n                    : \"none\")\r\n            }}\r\n                onClick=\r\n                { () => props.handleDelete() }>\r\n                X\r\n            </Button>\r\n            <Form.Control\r\n                ref={textAreaRef}\r\n                as=\"textarea\"\r\n                value={divState.value}\r\n                onChange={handleChange}\r\n                onMouseUp={handleMouseUp}\r\n                style={{\r\n                ...props.styleForText,\r\n                backgroundColor: (divState.textBackGround\r\n                    ? \"white\"\r\n                    : \"transparent\"),\r\n                border: (divState.textBackGround\r\n                    ? \"black\"\r\n                    : \"none\"),\r\n                fontWeight: \"900\",\r\n                color: \"white\",\r\n                textShadow: \"-1px 1px 2px #000,1px 1px 2px #000,1px -1px 0 #000,-1px -1px 0 #000\",\r\n                resize: \"both\",\r\n                height: divState.textBoxHight,\r\n                width: divState.textBoxWidth\r\n            }}/>\r\n        </StyledDiv>\r\n    )\r\n}\r\n\r\nexport default DraggableLable;","import React, {useContext} from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDrop} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport {LabelContex} from './memCreator';\r\n\r\nconst Wrapper = styled.section `\r\n  padding: 4em;\r\n  position:relative;\r\n  height: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nfunction ImageTarget(props) {\r\n\r\n    const {MoveToPosition} = useContext(LabelContex);\r\n\r\n    const [,drop] = useDrop({\r\n        accept: ItemTypes.LABEL,\r\n        drop: (item, monitor) => {\r\n            if (item.canMove) {\r\n                const delta = monitor.getDifferenceFromInitialOffset();\r\n                const left = Math.round(item.left + delta.x);\r\n                const top = Math.round(item.top + delta.y);\r\n                MoveToPosition(item.id, top, left);\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Wrapper ref={drop}>\r\n            {props.children}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ImageTarget;","import React, {createContext, useState} from 'react';\r\n\r\nimport './memeCreator.css'\r\nimport DraggableLable from './DraggableLable';\r\nimport ImageTarget from './imageTarget';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nexport const LabelContex = createContext({MoveToPosition: null})\r\n\r\nexport default function MemeCreator(props) {\r\n    //\r\n    const [dataAndStyle,\r\n        setDataAndStyle] = useState({\r\n        style: {\r\n            fontSize: \"medium\",\r\n            textAlign: \"center\"\r\n        },\r\n        data: [\r\n            {\r\n                id: 1,\r\n                top: 20,\r\n                left: 20\r\n            }\r\n        ]\r\n    });\r\n\r\n    const deleteCaption = id => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        data: dataAndStyle\r\n            .data\r\n            .filter(x => x.id !== id)\r\n    });\r\n\r\n    const addCaption = () => {\r\n        if (dataAndStyle.data.length === 0) {\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: [\r\n                    {\r\n                        id: 1,\r\n                        top: 20,\r\n                        left: 20\r\n                    }\r\n                ]\r\n            });\r\n        } else {\r\n            const MaxId = dataAndStyle\r\n                .data\r\n                .sort((x, y) => x.id<y.id\r\n                    ? -1\r\n                    : 1)[dataAndStyle.data.length - 1]\r\n                .id;\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: dataAndStyle\r\n                    .data\r\n                    .concat({\r\n                        id: MaxId + 1,\r\n                        top: 0,\r\n                        left: 0\r\n                    })\r\n            });\r\n        }\r\n    };\r\n\r\n    const changeAlign = align => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            textAlign: align\r\n        }\r\n    });\r\n    const changeSize = size => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            fontSize: size\r\n        }\r\n    });\r\n\r\n    const MoveToPosition = (id, top, left) => {\r\n        const moved = dataAndStyle\r\n            .data\r\n            .filter(x => x.id === id);\r\n        moved[0].top = top;\r\n        moved[0].left = left;\r\n        setDataAndStyle({\r\n            ...dataAndStyle,\r\n            data: dataAndStyle\r\n                .data\r\n                .filter(x => x.id !== id)\r\n                .concat(moved[0])\r\n        });\r\n    }\r\n\r\n    const textAligns = [\"left\", \"right\", \"center\"];\r\n    const textSizes = [\"x-small\", \"small\", \"medium\", \"large\", \"xx-large\"];\r\n\r\n    return (\r\n        <LabelContex.Provider value={{MoveToPosition}}>\r\n            <div>\r\n                <ButtonToolbar\r\n                    style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\"}}>\r\n\r\n                    <Button variant=\"success\" onClick={addCaption} size=\"sm\">\r\n                        Add Caption\r\n                    </Button>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Align\"\r\n                        id=\"text-align-dropdown\"\r\n                        size=\"sm\">\r\n                        {textAligns.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        onClick = {\r\n                            () => changeAlign(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.textAlign\r\n                        }> {x}\r\n                        </Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Size\"\r\n                        id=\"text-size-dropdown\"\r\n                        size=\"sm\">\r\n                        {textSizes.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        style = {\r\n                            {\r\n                                fontSize: x\r\n                            }\r\n                        }\r\n                        onClick = {\r\n                            () => changeSize(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.fontSize\r\n                        } > {\r\n                            x.toUpperCase()\r\n                        }</Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                   </ButtonToolbar>\r\n                        <ImageTarget>\r\n                            <img\r\n                                src={props.url}\r\n                                alt=\"meme\"\r\n                                style={{\r\n                                display: \"block\",\r\n                                maxHeight: \"80%\",\r\n                                maxWidth: \"80%\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: \"auto\"\r\n                            }}/> {dataAndStyle\r\n                                .data\r\n                                .map(item => <DraggableLable\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    top={item.top}\r\n                                    left={item.left}\r\n                                    handleDelete=\r\n                                    { () => deleteCaption(item.id) }\r\n                                    styleForText={dataAndStyle.style}/>)\r\n}\r\n                        </ImageTarget>\r\n                       </div>\r\n                        </LabelContex.Provider>)}","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport MemeImageToSelect from './memeImageToSelect';\r\nimport MemeCreator from './memCreator';\r\nimport './content.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction Content() {\r\n    const [memesState,\r\n        setMemes] = useState({\r\n        memes: [\r\n            {\r\n                url: \"\",\r\n                height:1,\r\n                width:1\r\n            }\r\n        ],\r\n        chosen: 0,\r\n        allMemes: [],\r\n        numberOfMemesInPage: 10\r\n    });\r\n\r\n    if (memesState.memes[0].url === \"\") {\r\n        console.log(memesState.memes.url)\r\n        axios\r\n            .get(`https://api.imgflip.com/get_memes`)\r\n            .then(res => {\r\n                const memes = res.data.data.memes;\r\n                setMemes({\r\n                    ...memesState,\r\n                    memes: memes.slice(0, memesState.numberOfMemesInPage),\r\n                    allMemes: memes\r\n                });\r\n            })\r\n    }\r\n\r\n    const changePicture = id => setMemes({\r\n        ...memesState,\r\n        chosen: id\r\n    });\r\n    const changeToPage = pageNum => {\r\n        const start = pageNum * memesState.numberOfMemesInPage;\r\n        let end = (pageNum + 1) * memesState.numberOfMemesInPage;\r\n        end = end <memesState.allMemes.length\r\n            ? end\r\n            : memesState.allMemes.length;\r\n        setMemes({\r\n            ...memesState,\r\n            memes: memesState\r\n                .allMemes\r\n                .slice(start, end),\r\n            chosen: 0\r\n        })\r\n    }\r\n\r\n    let memesMapped = memesState\r\n        .memes\r\n        .map((x, index) => <MemeImageToSelect\r\n            key={x.id + memesState.numberOfMemesInPage}\r\n            url={x.url}\r\n            name={x.name}\r\n            isChosen={index === memesState.chosen}\r\n            hight={x.height}\r\n            wid={x.width}\r\n            Click={() => changePicture(index)}/>);\r\n\r\n    const numberOfPages = Math.ceil(memesState.allMemes.length / memesState.numberOfMemesInPage);\r\n\r\n    const pagingButtons = Array(numberOfPages)\r\n        .fill()\r\n        .map((_, i) => <Button key={i} variant=\"success\" onClick={() => changeToPage(i)}>\r\n            {i + 1}\r\n        </Button>);\r\n\r\n    const memesPerPageOptions = [5, 10, 20];\r\n\r\n    return (\r\n        <div className='content box'>\r\n            <div className=\"middle box\">\r\n                <MemeCreator\r\n                    key={memesState.chosen}\r\n                    url={memesState.memes[memesState.chosen].url}/>\r\n                </div>\r\n\r\n                    <div className=\"side box\">\r\n                        <ButtonGroup\r\n                            size=\"sm\"\r\n                            style={{\r\n                            display: \"flex\",\r\n                            flexWrap: \"wrap\"\r\n                        }}>\r\n                            {pagingButtons}\r\n                            </ButtonGroup>\r\n\r\n                                <DropdownButton\r\n                                    as={ButtonGroup}\r\n                                    variant=\"success\"\r\n                                    title=\"Memes per page\"\r\n                                    id=\"num-of-memes-dropdown\"\r\n                                    size=\"sm\">\r\n                                    {memesPerPageOptions.map((x, index) => \r\n                                        <Dropdown.Item variant = \"success\" key = {index}\r\n                                    eventKey = {index}\r\n                                    onClick = {() => setMemes({\r\n                                            ...memesState,\r\n                                            numberOfMemesInPage: x,\r\n                                            chosen: 0,\r\n                                            memes: memesState\r\n                                                .allMemes\r\n                                                .slice(0, x)\r\n                                        })\r\n                                    }\r\n                                    active = {x === memesState.numberOfMemesInPage}>\r\n                                {x} \r\n                                        </Dropdown.Item>)}\r\n                                </DropdownButton>\r\n                                        <br/>\r\n                                        <br/>\r\n                                        <ul>\r\n                                            {memesMapped}\r\n                                        </ul>\r\n            </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n\r\n    export default Content;","import React from \"react\";\r\nimport Nav from \"./navigation\";\r\nimport Content from \"./content\";\r\nimport \"./app.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"layoutWrapper\" >\r\n            <Nav />\r\n            <Content />\r\n            <div className=\"footer box\" >\r\n                <p> I am footer </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {DndProvider} from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport TouchBackend from 'react-dnd-touch-backend';\nimport {isMobile} from 'react-device-detect';\n\n// ========================================\n\nconst opts = {enableTouchEvents:true};\n\nReactDOM.render(\n    <DndProvider backend={isMobile?TouchBackend:Backend} options={opts}>\n    <App/>\n</DndProvider>, document.getElementById('root'));"],"sourceRoot":""}