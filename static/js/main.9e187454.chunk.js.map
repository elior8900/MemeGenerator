{"version":3,"sources":["navigation.js","memeImageToSelect.js","items.js","DraggableLable.js","imageTarget.js","memCreator.js","content.js","about.js","app.js","index.js"],"names":["Nav","props","useState","active","setActive","className","onClick","changePage","href","MemeImageToSelect","isChosen","Click","data-tip","data-for","name","id","place","type","effect","src","url","alt","height","Math","min","hight","width","wid","ItemTypes","StyledDiv","styled","div","DraggableLable","value","buttonVissible","textBackGround","cursorIsMove","canMove","isMobile","divState","setValue","useDrag","item","top","left","collect","monitor","isDragging","drag","ref","style","backgroundColor","onMouseLeave","Button","variant","size","position","display","cursor","onMouseEnter","onMouseDown","onMouseUp","onTouchStart","right","handleDelete","onChange","event","target","styleForText","fontFamily","font","fontName","fontAdd","border","fontWeight","color","textShadow","resize","Wrapper","section","ImageTarget","MoveToPosition","useContext","LabelContex","useDrop","accept","drop","delta","getDifferenceFromInitialOffset","round","x","y","children","createContext","MemeCreator","imgRef","useRef","fontSize","textAlign","data","dataAndStyle","setDataAndStyle","moved","filter","concat","Provider","ButtonToolbar","justifyContent","length","MaxId","sort","DropdownButton","as","ButtonGroup","title","map","index","Dropdown","Item","key","eventKey","align","toUpperCase","changeFont","move","Content","memes","chosen","allMemes","numberOfMemesInPage","memesState","setMemes","axios","get","then","res","slice","memesMapped","numberOfPages","ceil","pagingButtons","Array","fill","_","i","pageNum","start","end","changeToPage","flexWrap","About","App","contentToRender","content","setContent","pageName","backendForDND","TouchBackend","Backend","ReactDOM","render","DndProvider","backend","document","getElementById"],"mappings":"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","file":"static/js/main.9e187454.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport './navigation.css'\r\n\r\nfunction Nav(props) {\r\n    const [active, setActive] = useState(\"home\");\r\n\r\n    return (\r\n        <div className=\"header box\">\r\n            <ul className='nav'>\r\n                <li className='nav'>\r\n                    <button className={`${active===\"home\"?\"active\":\"\"} nav`} \r\n                        onClick={()=>{props.changePage(\"home\");setActive(\"home\")}} href=\"/\">\r\n                        Home\r\n                    </button>\r\n                </li>\r\n                <li className=\"pushedRight nav\">\r\n                    <button className={`${active===\"about\"?\"active\":\"\"} nav`} \r\n                    onClick={()=>{props.changePage(\"about\");setActive(\"about\")}} href=\"/about\">\r\n                        About\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        )}\r\n\r\n        export default Nav;","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport './memeImageToSelect.css';\r\n\r\nfunction MemeImageToSelect(props) {\r\n\r\n    return (\r\n        <li\r\n            className={props.isChosen\r\n            ? \"active\"\r\n            : \"\"}\r\n            onClick=\r\n            { () => props.Click() }>\r\n            <div data-tip=\"tooltip\" data-for={props.name}>\r\n                {props.name}\r\n            </div>\r\n            <ReactTooltip id={props.name} place=\"right\" type=\"dark\" effect=\"float\">\r\n                <img\r\n                    className=\"toolTipImage\"\r\n                    src={props.url}\r\n                    alt={props.name}\r\n                    height={Math.min(props.hight, 150)}\r\n                    width={Math.min(props.wid, 150)}/>\r\n            </ReactTooltip>\r\n\r\n        </li>\r\n    )\r\n\r\n}\r\nexport default MemeImageToSelect","export const ItemTypes = {\r\n    LABEL: 'label'\r\n}","import React, {useState} from 'react';\r\nimport {useDrag} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n//import TextareaAutosize from 'react-textarea-autosize';\r\nimport Textarea from 'react-expanding-textarea'\r\nimport {isMobile} from \"react-device-detect\";\r\n\r\nconst StyledDiv = styled.div `\r\n                        background-color : none;\r\n                        font-size: 40px;\r\n                        font-weight: bold;\r\n                        position:absolute;\r\n                        \r\n    `;\r\n\r\nfunction DraggableLable(props) {\r\n\r\n    const [divState,\r\n        setValue] = useState({\r\n        value: \"Type your caption here, and move it around\",\r\n        buttonVissible: false,\r\n        textBackGround: false,\r\n        cursorIsMove: false,\r\n        canMove: isMobile,\r\n    });\r\n\r\n    const handleChange = event => setValue({\r\n        ...divState,\r\n        value: event.target.value\r\n    })\r\n    const handleClick = () => setValue({\r\n        ...divState,\r\n        buttonVissible: true,\r\n        textBackGround: true\r\n    });\r\n    const handleLeave = () => setValue({\r\n        ...divState,\r\n        buttonVissible: false,\r\n        textBackGround: false\r\n    });\r\n    \r\n    const [\r\n        {\r\n            isDragging\r\n        },\r\n        drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.LABEL,\r\n            id: props.id,\r\n            top: props.top,\r\n            left: props.left,\r\n            canMove: divState.canMove,\r\n            \r\n        },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    \r\n\r\n    if (isDragging) \r\n        return (<div ref={drag}/>);\r\n    \r\n    return (\r\n        <StyledDiv\r\n            ref={drag}\r\n            style={{\r\n            left: props.left,\r\n            top: props.top,\r\n            backgroundColor: \"none\"\r\n        }}\r\n            onClick={handleClick}\r\n            onMouseLeave={handleLeave}>\r\n            <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                display: (divState.buttonVissible&&!isMobile\r\n                    ? \"block\"\r\n                    : \"none\"),\r\n                cursor: (divState.cursorIsMove\r\n                    ? \"move\"\r\n                    : \"auto\")\r\n            }}\r\n                onMouseEnter=\r\n                { () => setValue({ ...divState, cursorIsMove: true, canMove: false }) }\r\n                onMouseLeave=\r\n                { () => setValue({ ...divState, cursorIsMove: false, canMove: false }) }\r\n                onMouseDown=\r\n                { () => setValue({ ...divState, canMove: true }) }\r\n                onMouseUp=\r\n                { () => setValue({ ...divState, canMove: false })}\r\n                onTouchStart={ () => setValue({ ...divState, canMove: true,buttonVissible: false,textBackGround: false }) }\r\n                \r\n                >\r\n                <img src=\"./move-button.png\" alt=\"\" height=\"30px\" width=\"25px\"/>\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"danger\"\r\n                size=\"sm\"\r\n                style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                right: \"0\",\r\n                display: (divState.buttonVissible\r\n                    ? \"block\"\r\n                    : \"none\")\r\n            }}\r\n                onClick=\r\n                { () => props.handleDelete() }>\r\n                X\r\n            </Button>\r\n            <Textarea \r\n                value={divState.value}\r\n                onChange={handleChange}\r\n                style={{\r\n                ...props.styleForText,\r\n                fontFamily: `${props.font.fontName},${props.font.fontAdd}`,\r\n                backgroundColor: (divState.textBackGround\r\n                    ? \"white\"\r\n                    : \"transparent\"),\r\n                border: (divState.textBackGround\r\n                    ? \"black\"\r\n                    : \"none\"),\r\n                fontWeight: \"900\",\r\n                color: \"white\",\r\n                textShadow: \"-1px 1px 2px #000,1px 1px 2px #000,1px -1px 0 #000,-1px -1px 0 #000\",\r\n                resize:\"none\"\r\n                }}\r\n             />\r\n        </StyledDiv>\r\n        \r\n    )\r\n}\r\n\r\nexport default DraggableLable;","import React, {useContext} from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDrop} from 'react-dnd';\r\nimport {ItemTypes} from './items';\r\nimport {LabelContex} from './memCreator';\r\n\r\nconst Wrapper = styled.section `\r\n  padding: 4em;\r\n  position:relative;\r\n  height: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nfunction ImageTarget(props) {\r\n\r\n    const {MoveToPosition} = useContext(LabelContex);\r\n\r\n    const [,drop] = useDrop({\r\n        accept: ItemTypes.LABEL,\r\n        drop: (item, monitor) => {\r\n            if (item.canMove) {\r\n                \r\n                const delta = monitor.getDifferenceFromInitialOffset();\r\n                const left = Math.round(item.left + delta.x);\r\n                const top = Math.round(item.top + delta.y);\r\n                MoveToPosition(item.id, top, left);\r\n            }\r\n        }\r\n    })\r\n\r\n    \r\n\r\n    return (\r\n        <Wrapper ref={drop}>\r\n            {props.children}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ImageTarget;","import React, {createContext, useState,useRef} from 'react';\r\n\r\nimport './memeCreator.css'\r\nimport DraggableLable from './DraggableLable';\r\nimport ImageTarget from './imageTarget';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nexport const LabelContex = createContext({MoveToPosition: null})\r\n\r\n\r\nexport default function MemeCreator(props) {\r\n    \r\n    const imgRef = useRef(null);\r\n\r\n    const [dataAndStyle,\r\n        setDataAndStyle] = useState({\r\n        style: {\r\n            fontSize: \"small\",\r\n            textAlign: \"center\",\r\n            \r\n        },\r\n        font:{fontName:'Amatic SC', fontAdd:'cursive'},\r\n        data: [\r\n            {\r\n                id: 1,\r\n                top: 20,\r\n                left: 20\r\n            }\r\n        ]\r\n    });\r\n\r\n    const deleteCaption = id => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        data: dataAndStyle\r\n            .data\r\n            .filter(x => x.id !== id)\r\n    });\r\n\r\n    const addCaption = () => {\r\n        if (dataAndStyle.data.length === 0) {\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: [\r\n                    {\r\n                        id: 1,\r\n                        top: 20,\r\n                        left: 20\r\n                    }\r\n                ]\r\n            });\r\n        } else {\r\n            const MaxId = dataAndStyle\r\n                .data\r\n                .sort((x, y) => x.id<y.id\r\n                    ? -1\r\n                    : 1)[dataAndStyle.data.length - 1]\r\n                .id;\r\n            setDataAndStyle({\r\n                ...dataAndStyle,\r\n                data: dataAndStyle\r\n                    .data\r\n                    .concat({\r\n                        id: MaxId + 1,\r\n                        top: 0,\r\n                        left: 0\r\n                    })\r\n            });\r\n        }\r\n    };\r\n\r\n    const changeAlign = align => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            textAlign: align\r\n        }\r\n    });\r\n    const changeSize = size => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        style: {\r\n            ...dataAndStyle.style,\r\n            fontSize: size\r\n        }\r\n    });\r\n\r\n    const changeFont = font => setDataAndStyle({\r\n        ...dataAndStyle,\r\n        font: font\r\n            \r\n        }\r\n    );\r\n\r\n    const MoveToPosition = (id, top, left) => {\r\n        const moved = dataAndStyle\r\n            .data\r\n            .filter(x => x.id === id);\r\n        moved[0].top = top;\r\n        moved[0].left = left;\r\n        setDataAndStyle({\r\n            ...dataAndStyle,\r\n            data: dataAndStyle\r\n                .data\r\n                .filter(x => x.id !== id)\r\n                .concat(moved[0])\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    const textAligns = [\"left\", \"right\", \"center\"];\r\n    const textSizes = [\"x-small\", \"small\", \"medium\", \"large\", \"xx-large\"];\r\n    const fontOptions = [{fontName:'Amatic SC', fontAdd:'cursive'},\r\n                        {fontName:'Secular One', fontAdd:'sans-serif'},\r\n                        {fontName:'Frank Ruhl Libre', fontAdd:'serif'}];\r\n\r\n//     font-family: 'Amatic SC', cursive;\r\n// font-family: 'Secular One', sans-serif;\r\n// font-family: 'Frank Ruhl Libre', serif;\r\n// font-family: 'Alatsi', sans-serif;\r\n\r\n    return (\r\n        <LabelContex.Provider value={{MoveToPosition}}>\r\n            <div>\r\n                <ButtonToolbar\r\n                    style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\"}}>\r\n\r\n                    <Button ref={imgRef} variant=\"success\" onClick={addCaption} size=\"sm\">\r\n                        Add Caption\r\n                    </Button>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Align\"\r\n                        id=\"text-align-dropdown\"\r\n                        size=\"sm\">\r\n                        {textAligns.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        onClick = {\r\n                            () => changeAlign(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.textAlign\r\n                        }> {x}\r\n                        </Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Text Size\"\r\n                        id=\"text-size-dropdown\"\r\n                        size=\"sm\">\r\n                        {textSizes.map((x, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        style = {\r\n                            {\r\n                                fontSize: x\r\n                            }\r\n                        }\r\n                        onClick = {\r\n                            () => changeSize(x)\r\n                        }\r\n                        active = {\r\n                            x === dataAndStyle.style.fontSize\r\n                        } > {\r\n                            x.toUpperCase()\r\n                        }</Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                    <DropdownButton\r\n                        as={ButtonGroup}\r\n                        variant=\"success\"\r\n                        title=\"Font\"\r\n                        id=\"Font-dropdown\"\r\n                        size=\"sm\">\r\n                        {fontOptions.map((font, index) =><Dropdown.Item variant = \"success\" key = {\r\n                            index\r\n                        }\r\n                        eventKey = {\r\n                            index\r\n                        }\r\n                        style = {\r\n                            {\r\n                                fontFamily: `${font.fontName},${font.fontAdd}`\r\n                            }\r\n                        }\r\n                        onClick = {\r\n                            () => changeFont(font)\r\n                        }\r\n                        active = {\r\n                            font.fontName === dataAndStyle.font.fontName\r\n                        } > {\r\n                            font.fontName.toUpperCase()\r\n                        }</Dropdown.Item>)}\r\n                    </DropdownButton>\r\n\r\n                   </ButtonToolbar>\r\n                        <ImageTarget >\r\n                          \r\n                             <img\r\n                                src={props.url}\r\n                                alt=\"meme\"\r\n                                className=\"memeImage\"\r\n                                \r\n                              /> \r\n                               {dataAndStyle\r\n                                .data\r\n                                .map(item => <DraggableLable\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    top={item.top}\r\n                                    left={item.left}\r\n                                    handleDelete=\r\n                                    { () => deleteCaption(item.id) }\r\n                                    move={(id,top,left)=>MoveToPosition(id,top,left)}\r\n                                    font={dataAndStyle.font}\r\n                                    styleForText={dataAndStyle.style}/>)\r\n}\r\n                        </ImageTarget>\r\n                       </div>\r\n                        </LabelContex.Provider>)}","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport MemeImageToSelect from './memeImageToSelect';\r\nimport MemeCreator from './memCreator';\r\nimport './content.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction Content() {\r\n    const [memesState,\r\n        setMemes] = useState({\r\n        memes: [\r\n            {\r\n                url: \"\",\r\n                height:1,\r\n                width:1\r\n            }\r\n        ],\r\n        chosen: 0,\r\n        allMemes: [],\r\n        numberOfMemesInPage: 10\r\n    });\r\n\r\n    if (memesState.memes[0].url === \"\") {\r\n        axios\r\n            .get(`https://api.imgflip.com/get_memes`)\r\n            .then(res => {\r\n                const memes = res.data.data.memes;\r\n                setMemes({\r\n                    ...memesState,\r\n                    memes: memes.slice(0, memesState.numberOfMemesInPage),\r\n                    allMemes: memes\r\n                });\r\n            })\r\n    }\r\n\r\n    const changePicture = id => setMemes({\r\n        ...memesState,\r\n        chosen: id\r\n    });\r\n    const changeToPage = pageNum => {\r\n        const start = pageNum * memesState.numberOfMemesInPage;\r\n        let end = (pageNum + 1) * memesState.numberOfMemesInPage;\r\n        end = end <memesState.allMemes.length\r\n            ? end\r\n            : memesState.allMemes.length;\r\n        setMemes({\r\n            ...memesState,\r\n            memes: memesState\r\n                .allMemes\r\n                .slice(start, end),\r\n            chosen: 0\r\n        })\r\n    }\r\n\r\n    let memesMapped = memesState\r\n        .memes\r\n        .map((x, index) => <MemeImageToSelect\r\n            key={x.id + memesState.numberOfMemesInPage}\r\n            url={x.url}\r\n            name={x.name}\r\n            isChosen={index === memesState.chosen}\r\n            hight={x.height}\r\n            wid={x.width}\r\n            Click={() => changePicture(index)}/>);\r\n\r\n    const numberOfPages = Math.ceil(memesState.allMemes.length / memesState.numberOfMemesInPage);\r\n\r\n    const pagingButtons = Array(numberOfPages)\r\n        .fill()\r\n        .map((_, i) => <Button key={i} variant=\"success\" onClick={() => changeToPage(i)}>\r\n            {i + 1}\r\n        </Button>);\r\n\r\n    const memesPerPageOptions = [5, 10, 20];\r\n\r\n    return (\r\n        <div className='content box'>\r\n            <div className=\"middle box\">\r\n                <MemeCreator\r\n                    key={memesState.chosen}\r\n                    url={memesState.memes[memesState.chosen].url}/>\r\n                </div>\r\n\r\n                    <div className=\"side box\">\r\n                        <ButtonGroup\r\n                            size=\"sm\"\r\n                            style={{\r\n                            display: \"flex\",\r\n                            flexWrap: \"wrap\"\r\n                        }}>\r\n                            {pagingButtons}\r\n                            </ButtonGroup>\r\n\r\n                                <DropdownButton\r\n                                    as={ButtonGroup}\r\n                                    variant=\"success\"\r\n                                    title=\"Memes per page\"\r\n                                    id=\"num-of-memes-dropdown\"\r\n                                    size=\"sm\">\r\n                                    {memesPerPageOptions.map((x, index) => \r\n                                        <Dropdown.Item variant = \"success\" key = {index}\r\n                                    eventKey = {index}\r\n                                    onClick = {() => setMemes({\r\n                                            ...memesState,\r\n                                            numberOfMemesInPage: x,\r\n                                            chosen: 0,\r\n                                            memes: memesState\r\n                                                .allMemes\r\n                                                .slice(0, x)\r\n                                        })\r\n                                    }\r\n                                    active = {x === memesState.numberOfMemesInPage}>\r\n                                {x} \r\n                                        </Dropdown.Item>)}\r\n                                </DropdownButton>\r\n                                        <br/>\r\n                                        <br/>\r\n                                        <ul>\r\n                                            {memesMapped}\r\n                                        </ul>\r\n            </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n\r\n    export default Content;","import React from 'react';\r\nimport './about.css';\r\n\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"aboutContainer\">\r\n            <div className=\"info\">\r\n                <div className=\"all info-header\">\r\n                    WHO AM I?\r\n                </div>\r\n             <div className=\"detail-wrapper\">\r\n                <div className=\"all info-detail\">\r\n                 I am an enthusiastic fast learner dedicated and inquisitive programmer\r\n                </div>\r\n\r\n                <div className=\"all info-detail\">\r\n                    Love FrontEnd development\r\n                </div>\r\n                <div className=\"all info-detail\">\r\n                Autodidact with a crave for new technologies\r\n                </div>\r\n                <div className=\"all info-detail\">\r\n                Problem solver with can-do attitude\r\n                </div>\r\n                <div className=\"all info-detail\">\r\n                Excellent grades\r\n                </div>\r\n                <div className=\"all info-detail\">\r\n                Team worker\r\n                </div>\r\n                <div className=\"all info-detail\">\r\n                Social and nice in general :-)\r\n                </div>\r\n             </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React,{useState} from \"react\";\r\nimport Nav from \"./navigation\";\r\nimport Content from \"./content\";\r\nimport About from \"./about\";\r\nimport \"./app.css\";\r\n\r\n\r\nfunction App() {\r\n    const [content, setContent] = useState(\"home\");\r\n\r\n    var contentToRender;\r\n\r\n    switch (content) {\r\n        case \"home\":\r\n            contentToRender=<Content/>;\r\n            break;\r\n        case \"about\":\r\n            contentToRender=<About/>;\r\n            break;\r\n        // case \"Contact\":\r\n        //     contentToRender=<Contact/>;\r\n        //     break;\r\n    \r\n   \r\n    }\r\n\r\n    return (\r\n        <div className=\"layoutWrapper\" >\r\n            <Nav changePage={(pageName)=>setContent(pageName)} />\r\n            {contentToRender}\r\n            \r\n            <div className=\"footer\" >\r\n                <p> This App was coded by elior8900 on github  </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nimport {DndProvider} from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport TouchBackend from 'react-dnd-touch-backend';\nimport {isMobile} from \"react-device-detect\";\n\n// ========================================\n\n\n\n// Assigning backend based on touch support on the device\nconst backendForDND = isMobile ? TouchBackend : Backend;\n\n\n\n\nReactDOM.render(\n    <DndProvider backend={backendForDND}>\n    <App/>\n</DndProvider>, document.getElementById('root'));"],"sourceRoot":""}